
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
using namespace std;

struct number{
	int d[100];
	void output(){
		for(int i = d[0]; i; --i)
			printf("%d", d[i]);
		printf("\n");
	}
	void init(int n){
		d[0] = 1;
		d[1] = n;
	}
} tot, base, one;

	inline void operator += (number &a, const number b){
		int dit = max(a.d[0], b.d[0]);
		for(int i = 1; i <= dit; ++i){
			a.d[i] += b.d[i];
			a.d[i + 1] += a.d[i] / 10;
			a.d[i] %= 10;
		}
		if(a.d[dit + 1])
			++dit;
		a.d[0] = dit;
	}

	inline void operator *= (number &a, const number b){
		int dit = a.d[0] + b.d[0];
		number c;
		memset(c.d, 0, sizeof(c.d));
		for(int i = 1; i <= a.d[0]; ++i)
			for(int j = 1; j <= b.d[0]; ++j)
				c.d[i + j - 1] += a.d[i] * b.d[j];
		for(int i = 1; i <= dit; ++i){
			c.d[i + 1] += c.d[i] / 10;
			c.d[i] %= 10;
		}
		while(c.d[dit + 1])
			++dit;
		while(!c.d[dit] && dit > 1)
			--dit;
		c.d[0] = dit;
		memcpy(a.d, c.d, sizeof(c.d));
	}

	number power(const number n, int m){
		number tmp = one;
		while(m--)
			tmp *= n;
		return tmp;
	}

int n;

void calc(int n){
	if(!n){
		if(getchar() == '0')
			tot += power(base, 0);
		return;
	}
	char c = getchar();
	if(c == '2'){
		calc(n - 1);
		calc(n - 1);
		calc(n - 1);
		calc(n - 1);
	}
	else if(c == '0')
		tot += power(power(base, n), 2);
}

int main(){
	scanf("%d\n", &n);
	tot.init(0);
	one.init(1);
	base.init(2);
	calc(n);
	tot.output();
	return 0;
}
