
program bzoj1004;

type
  group = array[1..60] of longint;

var
  sr, sb, sg, m, n, tot, p, i, j: longint;
  t: group;

  function plus(a, b: longint): longint;
  begin
    a := (a + b) mod p;
    exit(a);
  end;

  function calc(t: group): longint;
  var
    f: array[0..60, 0..60, 0..60] of longint;
    v: array[1..60] of boolean;
    s: array[1..60] of longint;
    i, j, k, l, num: longint;
  begin
    num := 0;
    fillchar(f, sizeof(f), 0);
    fillchar(v, sizeof(v), False);
    fillchar(s, sizeof(s), 0);
    for i := 1 to n do
      if not v[i] then
      begin
        j := i;
        Inc(num);
        while not v[j] do
        begin
          v[j] := True;
          j := t[j];
          Inc(s[num]);
        end;
      end;
    f[0, 0, 0] := 1;
    for l := 1 to num do
      for i := sr downto 0 do
        for j := sb downto 0 do
          for k := sg downto 0 do
          begin
            if i >= s[l] then
              f[i, j, k] := plus(f[i, j, k], f[i - s[l], j, k]);
            if j >= s[l] then
              f[i, j, k] := plus(f[i, j, k], f[i, j - s[l], k]);
            if k >= s[l] then
              f[i, j, k] := plus(f[i, j, k], f[i, j, k - s[l]]);
          end;
    exit(f[sr, sb, sg]);
  end;

  function power(a, b: longint): longint;
  var
    s: longint;
  begin
    if b = 1 then
      exit(a);
    s := power(a, b div 2);
    s := s * s mod p;
    if b and 1 = 1 then
      s := s * a mod p;
    exit(s);
  end;

begin
  Read(sr, sb, sg, m, p);
  n := sr + sb + sg;
  for i := 1 to m do
  begin
    for j := 1 to n do
      Read(t[j]);
    tot := tot + calc(t);
  end;
  for i := 1 to n do
    t[i] := i;
  tot := tot + calc(t);
  tot := tot * power(m + 1, p - 2) mod p;
  Write(tot);
end.
