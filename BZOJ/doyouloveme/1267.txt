#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <set>
#define MAXN 50010
#define MAXM 300010
using namespace std;

struct edge{
	int t, l, next;
} e[MAXN * 2];

int n, m;
int eTop, st[MAXN];

void addEdge(int a, int b, int l){
	eTop++;
	e[eTop].t = b;
	e[eTop].l = l;
	e[eTop].next = st[a];
	st[a] = eTop;
}

int divNode, mDivNum, sn[MAXN];
bool del[MAXN];
multiset<int> ans;

void dfs(int v, int f){
	sn[v] = 1;
	for(int i = st[v]; i; i = e[i].next)
		if(e[i].t != f && !del[e[i].t])
			dfs(e[i].t, v), sn[v] += sn[e[i].t];
}

void getDivNode(int v, int f, int F){
	int maxSn = sn[F] - sn[v];
	for(int i = st[v]; i; i = e[i].next)
		if(e[i].t != f && !del[e[i].t])
			getDivNode(e[i].t, v, F), maxSn = max(maxSn, sn[e[i].t]);
	if(maxSn < mDivNum){
		mDivNum = maxSn;
		divNode = v;
	}
}

int tot;
pair<int, int> que[MAXN];

void dfsDis(int v, int f, int F, int l){
	que[++tot] = make_pair(-l, F);
	for(int i = st[v]; i; i = e[i].next)
		if(e[i].t != f && !del[e[i].t])
			dfsDis(e[i].t ,v, F, l + e[i].l);
}

void solve(int v){
	mDivNum = n;
	dfs(v, 0);
	getDivNode(v, 0, v);
	int u = divNode;
	del[u] = 1; 
	tot = 0;
	for(int i = st[u]; i; i = e[i].next)
		if(!del[e[i].t])
			dfsDis(e[i].t, u, e[i].t, e[i].l);
	sort(que + 1, que + 1 + tot);
	int l = 1, r = 1, tmp;
	while(l <= tot){
		while(r <= tot){
			while(r <= tot && que[l].second == que[r].second) ++r;
			if(r > tot) break;
			tmp = -que[l].first - que[r].first;
			if(ans.size() >= m && tmp <= *ans.begin())
				break;
			ans.insert(tmp);
            if(ans.size() > m)
                ans.erase(ans.begin());
			++r;
		}
		if(ans.size() < m || -que[l].first > *ans.begin())
			ans.insert(-que[l].first);
        if(ans.size() > m)
            ans.erase(ans.begin());
		r = ++l;
	}
	for(int i = st[u]; i; i = e[i].next)
		if(!del[e[i].t])
			solve(e[i].t);
}

int main(){
	scanf("%d%d", &n, &m);
	int a, b, l;
	for(int i = 1; i < n; ++i){
		scanf("%d%d%d", &a, &b, &l);
		addEdge(a, b, l);
		addEdge(b, a, l);
	}
	solve(1);
	for(multiset<int>::iterator it = ans.end(); it != ans.begin(); ){
		--it;
		printf("%d\n", *it);
	}
	return 0;
}
