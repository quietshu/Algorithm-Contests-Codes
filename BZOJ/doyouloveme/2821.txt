#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#define MAXN 100050
#define SQRTN 350
#define rep(i, s, t) for(int i = s; i <= t; ++i)
using namespace std;

struct data{
	int num, pos;
	bool operator < (const data &d) const{
		return num < d.num || (num == d.num && pos < d.pos);
	}
} a[MAXN];
int n, c, m, ans, l, r, num[MAXN], st[MAXN], ed[MAXN];
int f[SQRTN][SQRTN], sts[SQRTN], bel[MAXN], sqrtn, sn;

void init(){
	static int t[MAXN];
	int top, tot;
	sqrtn = int(sqrt(n));
	for(int i = 1; i <= n; i += sqrtn)
		sts[++sn] = i;
	sts[sn + 1] = n + 1;
	rep(i, 1, sn){
		memset(t, 0, sizeof(t));
		top = i; tot = 0;
		rep(j, sts[i], n){
			t[num[j]]++;
			if(!(t[num[j]] & 1))
				tot++;
			else
				if(t[num[j]] > 1)
					tot--;
			if(j + 1 == sts[top + 1])
				f[i][top++] = tot;
		}
	}
	top = 1;
	rep(i, 1, n){
		if(i >= sts[top + 1])
			top++;
		bel[i] = top;
	}
	bel[0] = 0; bel[n + 1] = top + 1;
}

int v[MAXN], cnt[MAXN];

int getLR(int l, int r, int L, int R){
	if(a[R].pos < l || a[L].pos > r) return 0;
	int _l = L, _r = R, m, _L = L, _R = R;
	if(l >= a[L].pos){
		while(_l < _r){
			m = (_l + _r) / 2;
			if(a[m].pos < l)
				_l = m + 1;
			else if(a[m].pos > l)
				_r = m;
			else break;
		}
		_L = m;
		if(a[_L].pos < l) _L++;
	}
	_l = L; _r = R;
	if(r <= a[R].pos){
		while(_l < _r){
			m = (_l + _r + 1) / 2;
			if(a[m].pos > r)
				_r = m - 1;
			else if(a[m].pos < r)
				_l = m;
			else break;
		}
		_R = m;
		if(a[_R].pos > r) _R--;
	}
	return _R - _L + 1;
}

int calc(int m, int l, int r){
	int ans = 0, k = 0;
	if(bel[l] == bel[r]){
		rep(i, l, r)
			if(v[num[i]] != m){
				cnt[num[i]] = 1;
				v[num[i]] = m;
			}
			else{
				cnt[num[i]]++;
				if(cnt[num[i]] & 1) ans--; else ans++;
			}
		return ans;
	}
	for(int i = l; bel[i] == bel[l]; ++i)
		if(v[num[i]] != m){
			cnt[num[i]] = 1;
			v[num[i]] = m;
			k = getLR(sts[bel[l] + 1], sts[bel[r]] - 1, st[num[i]], ed[num[i]]);
			if(k > 0){
				if(!(k & 1)) ans--;
					else{
						cnt[num[i]]++;
						if(cnt[num[i]] & 1) ans--; else ans++;
					}
			}
		}
		else{
			cnt[num[i]]++;
			if(cnt[num[i]] & 1) ans--; else ans++;
		}
	for(int i = r; bel[i] == bel[r]; --i)
		if(v[num[i]] != m){
			cnt[num[i]] = 1;
			v[num[i]] = m;
			k = getLR(sts[bel[l] + 1], sts[bel[r]] - 1, st[num[i]], ed[num[i]]);
			if(k > 0){
				if(!(k & 1)) ans--;
					else{
						cnt[num[i]]++;
						if(cnt[num[i]] & 1) ans--; else ans++;
					}
			}
		}
		else{
			cnt[num[i]]++;
			if(cnt[num[i]] & 1) ans--; else ans++;
		}
	return ans += f[bel[l] + 1][bel[r] - 1];
}

int main(){
	scanf("%d%d%d", &n, &c, &m);
	rep(i, 1, n){
		scanf("%d", &a[i].num);
		a[i].pos = i;
		num[i] = a[i].num;
	}
	sort(a + 1, a + 1 + n);
	rep(i, 1, n)
		if(a[i].num != a[i - 1].num)
			st[a[i].num] = i, ed[a[i - 1].num] = i - 1;
	ed[a[n].num] = n;
	init();
	while(m--){
		scanf("%d%d", &l, &r);
		l = (l + ans) % n + 1;
		r = (r + ans) % n + 1;
		if(l > r) swap(l, r);
		printf("%d\n", ans = calc(m, l, r));
	}
	return 0;
}

