#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#define MAXN 45
#define MAXM 105
#define MAXV (MAXM * MAXN * 2)
using namespace std;

struct edge{
	int s, t, c, f, next, opp;
	edge(){}
	edge(int s, int t, int c, int f, int n, int o):
		s(s), t(t), c(c), f(f), next(n), opp(o){}
} e[MAXM * MAXN * MAXN * 4];

const int inf = ~0U >> 2;
int n, m, S, T, vNum, p[MAXN], t[MAXM][MAXN], pSum;
int eTop, st[MAXV], vTop[MAXM], last[MAXM];

void addEdge(int s, int t, int c, int f){
	eTop++;
	e[eTop] = edge(s, t, c, f, st[s], eTop + 1);
	st[s] = eTop;
	eTop++;
	e[eTop] = edge(t, s, -c, 0, st[t], eTop - 1);
	st[t] = eTop;
}

void addChef(int v){
	vTop[v]++; vNum++;
	for(int i = 1; i <= n; ++i)
		addEdge(i + 2, vNum, t[v][i] * vTop[v], 1);
	addEdge(vNum, T, 0, 1);
	last[v] = eTop - 1;
}

int que[MAXV * 10], dis[MAXV], pre[MAXV], cost;
bool inq[MAXV];

bool spfa(){
	int top;
	for(int i = 1; i <= vNum; ++i)
		dis[i] = inf, inq[i] = 0;
	inq[que[top = 1] = S] = 1;
	dis[S] = 0;
	for(int i = 1; i <= top; ++i){
		for(int j = st[que[i]]; j; j = e[j].next)
			if(e[j].f && dis[e[j].t] > dis[que[i]] + e[j].c){
				dis[e[j].t] = dis[que[i]] + e[j].c;
				if(!inq[e[j].t])
					que[++top] = e[j].t;
				inq[e[j].t] = 1;
				pre[e[j].t] = j;
			}
		inq[que[i]] = 0;
	}
	if(dis[T] == inf)
		return 0;
	int v = T, f = inf;
	while(v != S){
		f = min(f, e[pre[v]].f);
		v = e[pre[v]].s;
	}
	v = T;
	while(v != S){
		e[pre[v]].f -= f;
		e[e[pre[v]].opp].f += f;
		v = e[pre[v]].s;
	}
	cost += f * dis[T];
	return 1;
}

int main(){
	scanf("%d%d", &n, &m);
	S = 1; T = 2; vNum = 2;
	for(int i = 1; i <= n; ++i){
		scanf("%d", &p[i]), pSum += p[i];
		addEdge(S, ++vNum, 0, p[i]);
	}
	for(int i = 1; i <= n; ++i)
		for(int j = 1; j <= m; ++j)
			scanf("%d", &t[j][i]);
	for(int i = 1; i <= m; ++i)
		addChef(i);
	while(spfa())
		for(int i = 1; i <= m; ++i)
			if(!e[last[i]].f)
				addChef(i);
	printf("%d\n", cost);
	return 0;
}

