/*
* Copyright (C) 2012 All rights reserved.
* File name:  ball.cpp
* Author:     Parabola_ds
* Creat time: 2012.05.23
*/
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <vector>
#include <cstdio>
#include <queue>
#include <cmath>
#include <set>
#include <map>
#define MAXN 100
#define rep(i, n) for(int i = 1; i <= n; ++i)
using namespace std;

struct node{
	bool ava;
	pair<int, int> lc, rc;
	long long pu, pd;
	node(){
		pu = 0; pd = 1;
	}
} t[MAXN + 5][MAXN + 5];

int n, m;

void build(int x, int y){
	if(t[x][y].ava){
		t[x][y].lc = make_pair(x + 1, y);
		t[x][y].rc = make_pair(x + 1, y + 1);
	}
	else
		if(x < n - 1){
			t[x][y].lc = make_pair(x + 2, y + 1);
			t[x][y].rc = make_pair(x + 2, y + 1);
		}
		else if(x == n - 1){
			t[x][y].lc = make_pair(x + 2, y + 1);
			t[x][y].rc = make_pair(x + 2, y + 1);
		}
		else{
			t[x][y].lc = make_pair(x + 1, y);
			t[x][y].rc = make_pair(x + 1, y + 1);
		}
}

long long gcd(long long x, long long y){
	return y == 0 ? x : gcd(y, x % y);
}

void calc(int x, int y, long long pu, long long pd){
	long long d = gcd(t[x][y].pd, pd);
	t[x][y].pu = pd / d * t[x][y].pu + t[x][y].pd / d * pu;
	t[x][y].pd = t[x][y].pd / d * pd;
	d = gcd(t[x][y].pu, t[x][y].pd);
	t[x][y].pu /= d;
	t[x][y].pd /= d;
}

int main(){
	scanf("%d%d", &n, &m);
	char c;
	rep(i, n)
		rep(j, i){
			c = getchar();
			while(c != '*' && c != '.') c = getchar();
			t[i][j].ava = c == '*';
		}
	rep(i, n + 1)
		t[n][i].ava = 1;
	t[1][1].pu = t[1][1].pd = 1;
	rep(i, n)
		rep(j, i){
			build(i, j);
			calc(t[i][j].lc.first, t[i][j].lc.second, t[i][j].pu, t[i][j].pd * 2);
			calc(t[i][j].rc.first, t[i][j].rc.second, t[i][j].pu, t[i][j].pd * 2);
		}
	printf("%lld/%lld\n", t[n + 1][m + 1].pu, t[n + 1][m + 1].pd);
	return 0;
}

