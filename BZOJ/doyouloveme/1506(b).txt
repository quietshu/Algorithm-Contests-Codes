#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#define MAXM 12
#define MAXN 102
#define MAXK 102
#define rep(i, n) for(int i = 1; i <= n; ++i)
using namespace std;

const int inf = 1000000000;

int m, n, k, ans = inf;
char s[MAXN];
int wl[MAXM], wr[MAXN];
int x1[MAXK], y1[MAXK], x2[MAXK], y2[MAXK];
bool ew[MAXM], sn[MAXN];
bool l[MAXM], del[MAXN * 2];

struct segmentData{
	int l, r;
	segmentData(){}
	segmentData(int l, int r):
		l(l), r(r){}
	bool operator < (const segmentData s) const{
		return r < s.r;
	}
} seg[2][MAXK * 2];

int segNum[2], f[MAXN][MAXN * 2][MAXN * 2], last[2][MAXN];

void calc(int tot){
	if(tot >= ans) return;
	segNum[0] = segNum[1] = 0;
	rep(i, k){
		if(x1[i] == x2[i] && y1[i] == y2[i])
			continue;
		if(x1[i] == x2[i]){
			if(l[x1[i]] == (y1[i] < y2[i]))
				continue;
			else
				return;
		}
		if(y1[i] == y2[i]){
			seg[x1[i] < x2[i]][++segNum[x1[i] < x2[i]]] = segmentData(y1[i], y2[i]);
			continue;
		}
		if(x1[i] < x2[i]){
			if(l[x1[i]] != l[x2[i]])
				seg[1][++segNum[1]] = segmentData(l[x1[i]] == (y1[i] < y2[i]) ? y2[i] : y1[i],
												  l[x1[i]] == (y1[i] < y2[i]) ? y2[i] : y1[i]);
			else{
				if(l[x1[i]] == (y1[i] < y2[i]))
					seg[1][++segNum[1]] = segmentData(min(y1[i], y2[i]), max(y1[i], y2[i]));
				else{
					bool ok = 0;
					for(int j = x1[i]; j <= x2[i]; ++j)
						if(l[j] == (y1[i] < y2[i])){
							ok = 1;
							break;
						}
					if(!ok) return;
					seg[1][++segNum[1]] = segmentData(y1[i], y1[i]);
					seg[1][++segNum[1]] = segmentData(y2[i], y2[i]);
				}
			}
		}
		else{
			if(l[x1[i]] != l[x2[i]])
				seg[0][++segNum[0]] = segmentData(l[x1[i]] == (y1[i] < y2[i]) ? y2[i] : y1[i],
												  l[x1[i]] == (y1[i] < y2[i]) ? y2[i] : y1[i]);
			else{
				if(l[x1[i]] == (y1[i] < y2[i]))
					seg[0][++segNum[0]] = segmentData(min(y1[i], y2[i]), max(y1[i], y2[i]));
				else{
					bool ok = 0;
					for(int j = x2[i]; j <= x1[i]; ++j)
						if(l[j] == (y1[i] < y2[i])){
							ok = 1;
							break;
						}
					if(!ok) return;
					seg[0][++segNum[0]] = segmentData(y1[i], y1[i]);
					seg[0][++segNum[0]] = segmentData(y2[i], y2[i]);
				}
			}
		}
	}
	for(int k = 0; k < 2; ++k){
		memset(del, 0, sizeof del);
		rep(i, segNum[k])
			rep(j, segNum[k]) if(i != j){
				if(seg[k][i].l == seg[k][j].l && seg[k][i].r == seg[k][j].r)
					del[max(i, j)] = 1;
				else
					if(seg[k][i].l <= seg[k][j].l && seg[k][i].r >= seg[k][j].r) del[i] = 1;
			}
		int tot = 0;
		for(int i = 1; i <= segNum[k]; ++i)
			if(!del[i])
				seg[k][++tot] = seg[k][i];
		segNum[k] = tot;
	}
	for(int i = 0; i < 2; ++i){
		last[i][0] = 0;
		sort(seg[i] + 1, seg[i] + 1 + segNum[i]);
		int top = 1;
		rep(j, n){
			last[i][j] = last[i][j - 1];
			if(top <= segNum[i] && seg[i][top].r < j)
				last[i][j] = top++;
		}
	}
	rep(i, segNum[0] + 1)
		rep(j, segNum[1] + 1)
			f[0][i - 1][j - 1] = inf;
	f[0][0][0] = 0;
	rep(i, n)
		for(int j = 0; j <= segNum[0]; ++j)
			for(int k = 0; k <= segNum[1]; ++k){
				f[i][j][k] = f[i - 1][j][k];
				if(i <= seg[0][j].r && i >= seg[0][j].l)
					f[i][j][k] = min(f[i][j][k], f[i - 1][last[0][i]][k] + (sn[i] ? wr[i] : 0));
				if(i <= seg[1][k].r && i >= seg[1][k].l)
					f[i][j][k] = min(f[i][j][k], f[i - 1][j][last[1][i]] + (sn[i] ? 0 : wr[i]));
			}
	if(f[n][segNum[0]][segNum[1]] + tot < ans)
		ans = f[n][segNum[0]][segNum[1]] + tot;
}

void dfs(int k, int tot){
	if(k > m){
		calc(tot);
		return;
	}
	l[k] = 0; dfs(k + 1, tot + (ew[k] == 0 ? 0 : wl[k]));
	l[k] = 1; dfs(k + 1, tot + (ew[k] == 1 ? 0 : wl[k]));
}

int main(){
//	freopen("manhattan.in", "r", stdin);
//	freopen("manhattan.out", "w", stdout);
	scanf("%d%d", &m, &n);
	scanf("%s", s);
	rep(i, m)
		ew[i] = s[i - 1] == 'E';
	scanf("%s", s);
	rep(i, n)
		sn[i] = s[i - 1] == 'S';
	rep(i, m) scanf("%d", &wl[i]);
	rep(i, n) scanf("%d", &wr[i]);
	scanf("%d", &k);
	rep(i, k)
		scanf("%d%d%d%d", &x1[i], &y1[i], &x2[i], &y2[i]);
	dfs(1, 0);
	if(ans < inf)
		printf("possible\n%d\n", ans);
	else
		puts("impossible");
	return 0;
}
