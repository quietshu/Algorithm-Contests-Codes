// Pru(dot-dot)fer(?) Queue
#include <iostream>
#include <cstdio>
using namespace std;

const long long dit = 1000000;
int n, d[1001], l, sum = 0;
long long tot[501];

void mul(int a, int b)
{
	if(!b || a == b)
		return;
	long long N[501], ans[501] = {};
    int	M = 0;
	N[0] = N[1] = 1;
	for(int i = a; i >= a - b + 1; i--)
	{
		for(int s = 1; s <= N[0]; s++)
		{
			N[s] = N[s] * i + M;
			M = N[s] / dit;
			N[s] %= dit;
		}
		while(M > 0)
		{
			N[++N[0]] = M % dit;
			M /= dit;
		}
	}
	for(int i = 2; i <= b; i++)
	{
		M = 0;
		for(int s = N[0]; s >= 1; s--)
		{
			N[s] += M * dit;
			M = N[s] % i;
			N[s] /= i;
		}
		while(!N[N[0]])
			N[0]--;
	}
	for(int i = 1; i <= N[0]; i++)
		for(int j = 1; j <= tot[0]; j++)
			ans[i + j - 1] += N[i] * tot[j];
	M = 0;
	ans[0] = N[0] + tot[0] - 1;
	for(int i = 1; i <= ans[0]; i++)
	{
		M = ans[i] / dit;
		ans[i] %= dit;
		if(M)
		{
			ans[i + 1] += M;
			if(i == ans[0])
				ans[0]++;
		}
	}
	for(int i = 0; i <= ans[0]; i++)
		tot[i] = ans[i];
}

void mul_int(int N)
{
	tot[tot[0] + 1] = 0;
	for(int i = 1; i <= tot[0]; i++)
		tot[i] *= N;
	for(int i = 1; i <= tot[0]; i++)
	{
		tot[i + 1] += tot[i] / dit;
		tot[i] %= dit;
	}
	if(tot[tot[0] + 1])
		tot[0]++;
}

int main()
{
	scanf("%d", &n);
	l = n - 2;
	tot[0] = tot[1] = 1;
	for(int i = 1; i <= n; i++)
	{
		scanf("%d", &d[i]);
		if(d[i] >= 0)
		{
			mul(l, d[i] - 1);
			l -= d[i] - 1;
		}
		else
			sum++;
	}
	for(int i = 1; i <= l; i++)
		mul_int(sum);
	printf("%lld", tot[tot[0]]);
	for(int i = tot[0] - 1; i >= 1; i--)
		printf("%06d", tot[i]);
	printf("\n");
}
