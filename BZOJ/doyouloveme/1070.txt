/*
* Copyright (C) 2012 All rights reserved.
* File name:  1070.cpp
* Author:     Parabola_ds
* Creat time: 2012.06.07
*/
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <vector>
#include <cstdio>
#include <queue>
#include <cmath>
#include <set>
#include <map>
#define MAXN 1000
#define MAXM 100000
#define rep(i, n) for(int i = 1; i <= n; ++i)
using namespace std;

struct edge{
	int t, f, c, next;
	edge(){}
	edge(int t, int f, int c, int n):
		t(t), f(f), c(c), next(n){}
} e[MAXM * 2];

int n, m, x, S, T;
int etop, st[MAXN];

void add(int s, int t, int f, int c){
	e[++etop] = edge(t, f, c, st[s]);
	st[s] = etop;
	e[++etop] = edge(s, 0, -c, st[t]);
	st[t] = etop;
}

const int inf = 1000000000;
int dis[MAXN], pre[MAXN], que[MAXN * 10];
bool vst[MAXN];

bool spfa(){
	int p, q;
	rep(i, T)
		dis[i] = inf, pre[i] = 0;
	memset(vst, 0, sizeof(vst));
	dis[S] = 0; vst[S] = 1;
	que[p = q = 1] = S;
	while(p <= q){
		for(int v = st[que[p]]; v; v = e[v].next)
			if(e[v].f && dis[e[v].t] > dis[que[p]] + e[v].c){
				dis[e[v].t] = dis[que[p]] + e[v].c;
				pre[e[v].t] = v;
				if(!vst[e[v].t])
					que[++q] = e[v].t;
				vst[e[v].t] = 1;
			}
		vst[que[p++]] = 0;
	}
	return dis[T] != inf;
}

int minCostMaxFlow(){
	int c = 0;
	while(spfa()){
		for(int i = pre[T]; i; i = pre[e[i + (i & 1 ? 1 : -1)].t]){
			e[i].f--;
			e[i + (i & 1 ? 1 : -1)].f++;
		}
		c += dis[T];
	}
	return c;
}

int main(){
	scanf("%d%d", &m, &n);
	S = n + m * n + 1;
	T = S + 1;
	rep(i, n){
		add(S, i, 1, 0);
		rep(j, m){
			scanf("%d", &x);
			rep(k, n)
				add(i, n + (j - 1) * n + k, 1, x * k);
		}
	}
	rep(j, m)
		rep(k, n)
			add(n + (j - 1) * n + k, T, 1, 0);
	printf("%.2lf\n", double(minCostMaxFlow()) / n);
	return 0;
}
