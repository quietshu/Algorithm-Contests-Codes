#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#define rep(i, n) for(int i = 0; i < n; i++)
#define debug(x) cout << #x << " = " << x << endl;
using namespace std;
const int mo = 31011, MAXN = 105;
struct edge
{
    int a, b, c;
} e[1005];

int n, m, sum = 0, tot = 1, fa[MAXN], fa2[MAXN], num, ss;

bool comp(edge x, edge y)
{
    return x.c < y.c;
}

int father(int i)
{
    if(fa[i] == i)
        return i;
    return fa[i] = father(fa[i]);
}

int father2(int i)
{
    if(fa2[i] == i)
        return i;
    return fa2[i] = father2(fa2[i]);
}

int Backup[25][MAXN], deep;

void dfs(int i, int j, int num)
{
    if(num == 0)
    {
        ss++;
        return;
    }
    if(i > j)
        return;
    int f1 = father2(e[i].a), f2 = father2(e[i].b);
    if(f1 != f2)
    {
        rep(pp, n)
            Backup[deep][pp] = fa2[pp];
        fa2[f1] = f2;
        deep++;
        dfs(i + 1, j, num - 1);
        deep--;
        rep(pp, n)
            fa2[pp] = Backup[deep][pp];
    }
    deep++;
    dfs(i + 1, j, num);
    deep--;
}

int main()
{
    scanf("%d%d", &n, &m);
    rep(i, m)
    {
        scanf("%d%d%d", &e[i].a, &e[i].b, &e[i].c);
        e[i].a--;
        e[i].b--;
    }
    sort(e, e + m, comp);
    rep(i, n)
        fa2[i] = fa[i] = i;
    int i, j = 0;
    for(i = 0; i < m; i = j + 1)
    {
        num = 0;
        for(j = i; e[j].c == e[j + 1].c && j < m - 1; j++);
        for(int k = i; k <= j; k++)
            if(father(e[k].a) != father(e[k].b))
            {
                fa[father(e[k].a)] = father(e[k].b);
                num++;
                sum++;
            }
        //debug(i);debug(j);debug(num);
        ss = 0;
        deep = 0;
        dfs(i, j, num);
        rep(pp, n)
            fa2[pp] = fa[pp];
        //debug(ss);
        tot = tot * ss % mo;
    }
    if(sum != n - 1)
        tot = 0;
    printf("%d\n", tot);
    return 0;
}
