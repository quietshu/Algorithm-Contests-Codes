#include <iostream>
#include <cstdio>
#define MAXN 10000010
#define rep(i, n) for(int i = 1; i <= n; ++i)
using namespace std;
 
typedef unsigned int uint;

long long mod;
uint fact[MAXN + 10], prime[MAXN + 10], calc[MAXN + 10], mul[MAXN + 10];
bool P[MAXN + 10];
 
long long power(long long n, long long m){
        if(!m) return 1;
        long long p = power(n, m / 2);
        p = p * p % mod;
        if(m & 1) p = p * n % mod;
        return p;
}

inline void read(uint &n){
	char c = getchar(); n = 0;
	while(c < '0' || c > '9') c = getchar();
	while(c >= '0' && c <= '9'){
		n = n * 10 + c - '0';
		c = getchar();
	}
}
 
int main(){
    uint test_num, tot = 0, n, m;
    scanf("%d%lld", &test_num, &mod);
    fact[0] = 1;
        rep(i, MAXN)
                fact[i] = (long long)fact[i - 1] * (long long)i % mod, P[i] = 1;
        for(int i = 2; i <= MAXN; ++i){
                if(P[i])
                        for(int j = 2; j * i <= MAXN; ++j)
                                P[i * j] = 0;
                if(P[i])
                        prime[++tot] = i;
        }
        calc[0] = mul[0] = 1;
        rep(i, tot){
                calc[i] = (long long)calc[i - 1] * (long long)(prime[i] - 1) % mod;
                mul[i] = (long long)mul[i - 1] * (long long)prime[i] % mod;
        }
		while(test_num--){
                read(n); read(m);
                int l = 1, r = tot, mid;
				while(l <= r){
					mid = (l + r) / 2;
					if(prime[mid] > m)
						r = mid - 1;
					else
						l = mid + 1;
				}
				if(prime[l] > m) l--;
                printf("%lld\n", ((long long)power(mul[l], mod - 2) * (long long)calc[l]) % mod * (long long)fact[n] % mod);
        }
        return 0;
}

