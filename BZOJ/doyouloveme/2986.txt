/*
*	Copyright (C) Ds ds303077135@gmail.com
*	File Name     : BZOJ_2983_Non-Squarefree_Numbers.cpp
*	Creation Time : 2013/01/03 14:02:48
*	Environment   : OS X 10.8
*/
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#define LIM 1000000
#define rep(i, n) for(int i = 1; i <= n; ++i)
using namespace std;

long long n;
int pn, prime[LIM / 2], mu[LIM + 100];
bool notPrime[LIM + 100];

void init(){
	mu[1] = 1;
	for(int i = 2; i <= LIM; ++i){
		if(!notPrime[i]){
			prime[++pn] = i;
			mu[i] = -1;
		}
		for(int j = 1; j <= pn && i * prime[j] <= LIM; ++j){
			notPrime[i * prime[j]] = 1;
			mu[i * prime[j]] = i % prime[j] == 0 ? 0 : -mu[i];
			if(i % prime[j] == 0)
				break;
		}
	}
}

long long calc(long long n){
	long long s = 0;
	for(long long i = 1; i * i <= n; ++i)
		s += mu[i] * (n / (i * i));
	return n - s;
}

long long L, R, M;

int main(){
	scanf("%lld", &n);
	init();
	L = 1; R = 100000000000ll;
	while(L + 1 < R){
		M = (L + R) >> 1;
		if(calc(M) < n)
			L = M;
		else
			R = M;
	}
	if(calc(L) == n)
		M = L;
	else
		M = R;
	printf("%lld\n", M);
	return 0;
}
